// Test √∫stn√≠ho zkou≈°en√≠ - Uk√°zka pou≈æit√≠

class OralExamTester {
    constructor() {
        this.testResults = [];
    }
    
    // Test z√°kladn√≠ funkcionality
    async runBasicTests() {
        console.log('üß™ Spou≈°t√≠m z√°kladn√≠ testy √∫stn√≠ho zkou≈°en√≠...');
        
        // Test 1: Inicializace syst√©mu
        try {
            const oralExam = new OralExamSystem();
            console.log('‚úÖ Test 1: Inicializace √∫spƒõ≈°n√°');
            this.testResults.push({ test: 'Inicializace', status: 'PASS' });
        } catch (error) {
            console.error('‚ùå Test 1: Chyba inicializace:', error);
            this.testResults.push({ test: 'Inicializace', status: 'FAIL', error: error.message });
        }
        
        // Test 2: Speech Synthesis podpora
        try {
            const synthesis = window.speechSynthesis;
            const voices = synthesis.getVoices();
            
            if (synthesis && voices.length > 0) {
                console.log('‚úÖ Test 2: Speech Synthesis podporov√°no');
                console.log(`   Dostupn√© hlasy: ${voices.length}`);
                this.testResults.push({ test: 'Speech Synthesis', status: 'PASS' });
            } else {
                console.log('‚ö†Ô∏è Test 2: Speech Synthesis omezen√° podpora');
                this.testResults.push({ test: 'Speech Synthesis', status: 'PARTIAL' });
            }
        } catch (error) {
            console.error('‚ùå Test 2: Speech Synthesis chyba:', error);
            this.testResults.push({ test: 'Speech Synthesis', status: 'FAIL', error: error.message });
        }
        
        // Test 3: Speech Recognition podpora
        try {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            
            if (SpeechRecognition) {
                console.log('‚úÖ Test 3: Speech Recognition podporov√°no');
                this.testResults.push({ test: 'Speech Recognition', status: 'PASS' });
            } else {
                console.log('‚ö†Ô∏è Test 3: Speech Recognition nen√≠ podporov√°no');
                this.testResults.push({ test: 'Speech Recognition', status: 'FAIL', error: 'Nepodporov√°no v tomto browseru' });
            }
        } catch (error) {
            console.error('‚ùå Test 3: Speech Recognition chyba:', error);
            this.testResults.push({ test: 'Speech Recognition', status: 'FAIL', error: error.message });
        }
        
        // Test 4: API dostupnost
        try {
            const apiKey = 'sk-049nXVgkhXvC1mJIMdyuvOFPlc-GEGtec2OhmpnkeQ6Ksrz47edYR8bQRZmtYkLlQT0AIJpN-Hgc3l0a5wfjubpu4Z2O';
            
            if (apiKey && apiKey.length > 10) {
                console.log('‚úÖ Test 4: API kl√≠ƒç nakonfigurov√°n');
                this.testResults.push({ test: 'API konfigurace', status: 'PASS' });
            } else {
                console.log('‚ö†Ô∏è Test 4: API kl√≠ƒç nen√≠ nakonfigurov√°n');
                this.testResults.push({ test: 'API konfigurace', status: 'FAIL', error: 'Chyb√≠ API kl√≠ƒç' });
            }
        } catch (error) {
            console.error('‚ùå Test 4: API konfigurace chyba:', error);
            this.testResults.push({ test: 'API konfigurace', status: 'FAIL', error: error.message });
        }
        
        return this.testResults;
    }
    
    // Test AI hodnocen√≠ s uk√°zkov√Ωmi daty
    async testAIEvaluation() {
        console.log('ü§ñ Testov√°n√≠ AI hodnocen√≠...');
        
        const testData = {
            question: "Jak√© jsou hlavn√≠ ƒç√°sti ≈æelezniƒçn√≠ tratƒõ?",
            correctAnswer: "Hlavn√≠ ƒç√°sti ≈æelezniƒçn√≠ tratƒõ jsou: koleji≈°tƒõ, trakƒçn√≠ veden√≠, zabezpeƒçovac√≠ za≈ô√≠zen√≠ a telekomunikaƒçn√≠ syst√©my.",
            userAnswer: "≈Ωelezniƒçn√≠ tra≈• m√° koleje, dr√°ty nad kolejemi a r≈Øzn√© sign√°ly."
        };
        
        try {
            const oralExam = new OralExamSystem();
            
            // Simulace AI anal√Ωzy
            const mockAnalysis = {
                summary: "Student zm√≠nil z√°kladn√≠ komponenty tratƒõ, ale chyb√≠ detaily.",
                score: 65,
                scoreBreakdown: {
                    factual: 25,
                    completeness: 18,
                    clarity: 15,
                    structure: 7
                },
                positives: [
                    "Spr√°vnƒõ identifikoval koleje jako z√°kladn√≠ souƒç√°st",
                    "Zm√≠nil trakƒçn√≠ veden√≠ (dr√°ty)"
                ],
                negatives: [
                    "Chyb√≠ zm√≠nka o zabezpeƒçovac√≠m za≈ô√≠zen√≠",
                    "Nespecifikoval telekomunikaƒçn√≠ syst√©my"
                ],
                recommendations: [
                    "Prostudovat si kompletn√≠ seznam souƒç√°st√≠ tratƒõ",
                    "Pou≈æ√≠vat p≈ôesnƒõj≈°√≠ technickou terminologii"
                ],
                grade: "C"
            };
            
            console.log('‚úÖ AI anal√Ωza √∫spƒõ≈°n√°:', mockAnalysis);
            this.testResults.push({ test: 'AI hodnocen√≠', status: 'PASS', data: mockAnalysis });
            
            return mockAnalysis;
            
        } catch (error) {
            console.error('‚ùå AI anal√Ωza selhala:', error);
            this.testResults.push({ test: 'AI hodnocen√≠', status: 'FAIL', error: error.message });
            return null;
        }
    }
    
    // Test kompletn√≠ho workflow
    async runWorkflowTest() {
        console.log('üîÑ Testov√°n√≠ kompletn√≠ho workflow...');
        
        try {
            // 1. Naƒçten√≠ ot√°zek
            if (typeof QUIZ_DATA !== 'undefined' && QUIZ_DATA.tables) {
                const tableNames = Object.keys(QUIZ_DATA.tables);
                if (tableNames.length > 0) {
                    console.log(`‚úÖ Workflow 1: Nalezeno ${tableNames.length} tabulek ot√°zek`);
                } else {
                    console.log('‚ö†Ô∏è Workflow 1: ≈Ω√°dn√© tabulky ot√°zek nenalezeny');
                }
            }
            
            // 2. Test TTS
            const utterance = new SpeechSynthesisUtterance("Test text-to-speech");
            utterance.lang = 'cs-CZ';
            utterance.rate = 1.0;
            
            console.log('‚úÖ Workflow 2: TTS utterance vytvo≈ôeno');
            
            // 3. Test localStorage
            const testData = { test: 'oral_exam_test', timestamp: Date.now() };
            localStorage.setItem('oral_exam_test', JSON.stringify(testData));
            const retrieved = JSON.parse(localStorage.getItem('oral_exam_test'));
            
            if (retrieved && retrieved.test === 'oral_exam_test') {
                console.log('‚úÖ Workflow 3: LocalStorage funkƒçn√≠');
                localStorage.removeItem('oral_exam_test');
            }
            
            // 4. Test export funkce
            const exportData = {
                examDate: new Date().toISOString(),
                questions: ['Test ot√°zka 1', 'Test ot√°zka 2'],
                results: ['V√Ωsledek 1', 'V√Ωsledek 2']
            };
            
            console.log('‚úÖ Workflow 4: Export data p≈ôipravena');
            
            this.testResults.push({ test: 'Kompletn√≠ workflow', status: 'PASS' });
            
        } catch (error) {
            console.error('‚ùå Workflow test selhal:', error);
            this.testResults.push({ test: 'Kompletn√≠ workflow', status: 'FAIL', error: error.message });
        }
    }
    
    // Generov√°n√≠ test reportu
    generateReport() {
        console.log('\nüìã === REPORT TEST≈Æ √öSTN√çHO ZKOU≈†EN√ç ===\n');
        
        const passed = this.testResults.filter(r => r.status === 'PASS').length;
        const failed = this.testResults.filter(r => r.status === 'FAIL').length;
        const partial = this.testResults.filter(r => r.status === 'PARTIAL').length;
        
        console.log(`‚úÖ √öspƒõ≈°n√©: ${passed}`);
        console.log(`‚ùå Ne√∫spƒõ≈°n√©: ${failed}`);
        console.log(`‚ö†Ô∏è ƒå√°steƒçn√©: ${partial}`);
        console.log(`üìä Celkem: ${this.testResults.length}`);
        
        console.log('\nüìù Detailn√≠ v√Ωsledky:');
        this.testResults.forEach((result, index) => {
            const status = {
                'PASS': '‚úÖ',
                'FAIL': '‚ùå',
                'PARTIAL': '‚ö†Ô∏è'
            }[result.status];
            
            console.log(`${index + 1}. ${status} ${result.test}`);
            if (result.error) {
                console.log(`   Chyba: ${result.error}`);
            }
        });
        
        console.log('\nüîß Doporuƒçen√≠:');
        if (failed > 0) {
            console.log('- Zkontrolujte konfiguraci API kl√≠ƒçe');
            console.log('- Ovƒõ≈ôte podporu Speech API v browseru');
            console.log('- Zkuste spustit v Chrome nebo Edge');
        }
        
        if (partial > 0) {
            console.log('- Nainstalujte ƒçesk√© hlasov√© bal√≠ƒçky');
            console.log('- Povolte mikrofon v browseru');
        }
        
        console.log('\n===========================================\n');
        
        return {
            summary: { passed, failed, partial, total: this.testResults.length },
            details: this.testResults
        };
    }
}

// Spu≈°tƒõn√≠ test≈Ø (p≈ôi naƒçten√≠ str√°nky)
document.addEventListener('DOMContentLoaded', async () => {
    // Poƒçkat na naƒçten√≠ v≈°ech komponent
    setTimeout(async () => {
        if (typeof OralExamSystem !== 'undefined') {
            const tester = new OralExamTester();
            
            console.log('üöÄ Spou≈°t√≠m testy √∫stn√≠ho zkou≈°en√≠...\n');
            
            await tester.runBasicTests();
            await tester.testAIEvaluation();
            await tester.runWorkflowTest();
            
            const report = tester.generateReport();
            
            // Ulo≈æit report do localStorage pro debugging
            localStorage.setItem('oral_exam_test_report', JSON.stringify(report));
            
        } else {
            console.error('‚ùå OralExamSystem nen√≠ naƒçten - zkontrolujte script tagy');
        }
    }, 2000);
});

// P≈ôid√°n√≠ test tlaƒç√≠tka do konzole
window.testOralExam = async () => {
    const tester = new OralExamTester();
    await tester.runBasicTests();
    await tester.testAIEvaluation();
    await tester.runWorkflowTest();
    return tester.generateReport();
};

console.log('üß™ Test framework naƒçten. Spus≈•te manu√°lnƒõ: testOralExam()');
