// Syst√©m √∫stn√≠ho zkou≈°en√≠ s TTS, Speech Recognition a AI hodnocen√≠m

class OralExamSystem {
    constructor() {
        this.isActive = false;
        this.currentQuestion = null;
        this.currentQuestions = [];
        this.currentQuestionIndex = 0;
        this.examResults = [];
        this.isRecording = false;
        this.speechRecognition = null;
        this.speechSynthesis = window.speechSynthesis;
        this.currentUtterance = null;
        
        // Monica IM API konfigurace
        this.apiKey = 'sk-049nXVgkhXvC1mJIMdyuvOFPlc-GEGtec2OhmpnkeQ6Ksrz47edYR8bQRZmtYkLlQT0AIJpN-Hgc3l0a5wfjubpu4Z2O';
        this.apiUrl = 'https://openapi.monica.im/v1/chat/completions';
        
        console.log('OralExamSystem inicializov√°n');
        
        this.setupSpeechRecognition();
        this.createOralExamUI();
        this.setupEventListeners();
    }
    
    setupSpeechRecognition() {
        // Kontrola podpory Web Speech API
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            console.warn('Speech Recognition nen√≠ podporov√°na v tomto prohl√≠≈æeƒçi');
            return;
        }
        
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.speechRecognition = new SpeechRecognition();
        
        this.speechRecognition.continuous = true;
        this.speechRecognition.interimResults = true;
        this.speechRecognition.lang = 'cs-CZ';
        this.speechRecognition.maxAlternatives = 1;
        
        this.speechRecognition.onstart = () => {
            this.isRecording = true;
            this.updateRecordingUI(true);
        };
        
        this.speechRecognition.onresult = (event) => {
            let finalTranscript = '';
            let interimTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const transcript = event.results[i][0].transcript;
                if (event.results[i].isFinal) {
                    finalTranscript += transcript;
                } else {
                    interimTranscript += transcript;
                }
            }
            
            this.updateTranscriptUI(finalTranscript, interimTranscript);
        };
        
        this.speechRecognition.onerror = (event) => {
            console.error('Speech recognition error:', event.error);
            this.isRecording = false;
            this.updateRecordingUI(false);
            this.showError(`Chyba rozpozn√°v√°n√≠ ≈ôeƒçi: ${event.error}`);
        };
        
        this.speechRecognition.onend = () => {
            this.isRecording = false;
            this.updateRecordingUI(false);
        };
    }
    
    createOralExamUI() {
        // Zkontrolovat, jestli u≈æ modal neexistuje
        const existingModal = document.getElementById('oralExamModal');
        if (existingModal) {
            console.log('Modal u≈æ existuje, nebudu ho p≈ôid√°vat znovu');
            return;
        }
        
        console.log('Vytv√°≈ô√≠m UI pro √∫stn√≠ zkou≈°en√≠...');
        
        const oralExamHTML = `
            <div id="oralExamModal" class="modal hidden">
                <div class="modal-content oral-exam-content">
                    <div class="oral-exam-header">
                        <h2>üé§ √östn√≠ zkou≈°en√≠</h2>
                        <div class="exam-controls">
                            <button id="startOralExam" class="btn-primary">Zaƒç√≠t zkou≈°en√≠</button>
                            <button id="stopOralExam" class="btn-secondary" disabled>Ukonƒçit zkou≈°en√≠</button>
                            <button id="closeOralExam" class="btn-close">‚úï</button>
                        </div>
                    </div>
                    
                    <div class="oral-exam-body">
                        <!-- Nastaven√≠ zkou≈°en√≠ -->
                        <div id="oralExamSettings" class="exam-settings">
                            <div class="setting-group">
                                <label for="oralExamTable">Tabulka ot√°zek:</label>
                                <select id="oralExamTable">
                                    <option value="">Vyberte tabulku...</option>
                                </select>
                            </div>
                            
                            <div class="setting-group">
                                <label for="questionCount">Poƒçet ot√°zek:</label>
                                <input type="number" id="questionCount" min="1" max="50" value="5">
                            </div>
                            
                            <div class="setting-group">
                                <label>
                                    <input type="checkbox" id="randomOrder" checked>
                                    N√°hodn√© po≈ôad√≠ ot√°zek
                                </label>
                            </div>
                            
                            <div class="setting-group">
                                <label for="speechRate">Rychlost ≈ôeƒçi:</label>
                                <input type="range" id="speechRate" min="0.5" max="2" step="0.1" value="1">
                                <span id="speechRateValue">1.0x</span>
                            </div>
                            
                            <div class="setting-group">
                                <label for="voiceSelect">Hlas:</label>
                                <select id="voiceSelect">
                                    <option value="">V√Ωchoz√≠ hlas</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Pr≈Øbƒõh zkou≈°en√≠ -->
                        <div id="oralExamSession" class="exam-session hidden">
                            <div class="question-progress">
                                <span id="currentQuestionNumber">1</span> / <span id="totalQuestions">5</span>
                                <div class="progress-bar">
                                    <div id="oralProgressFill" class="progress-fill"></div>
                                </div>
                            </div>
                            
                            <div class="question-display">
                                <div class="question-header">
                                    <h3>Ot√°zka:</h3>
                                    <div class="audio-controls">
                                        <button id="playQuestion" class="btn-audio" title="P≈ôehr√°t ot√°zku">üîä</button>
                                        <button id="pauseQuestion" class="btn-audio" title="Pozastavit" disabled>‚è∏Ô∏è</button>
                                        <button id="stopQuestion" class="btn-audio" title="Zastavit" disabled>‚èπÔ∏è</button>
                                    </div>
                                </div>
                                <div id="currentQuestionText" class="question-text-oral">
                                    Naƒç√≠t√°n√≠ ot√°zky...
                                </div>
                            </div>
                            
                            <div class="answer-section">
                                <div class="answer-header">
                                    <h3>Va≈°e odpovƒõƒè:</h3>
                                    <div class="recording-controls">
                                        <button id="startRecording" class="btn-record" title="Zaƒç√≠t nahr√°v√°n√≠">üé§</button>
                                        <button id="stopRecording" class="btn-record" title="Ukonƒçit nahr√°v√°n√≠" disabled>‚èπÔ∏è</button>
                                        <div id="recordingIndicator" class="recording-indicator hidden">
                                            <span class="recording-dot"></span>
                                            Nahr√°v√°m...
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="transcript-section">
                                    <div id="liveTranscript" class="live-transcript">
                                        <div class="interim-text" id="interimText"></div>
                                        <div class="final-text" id="finalText"></div>
                                    </div>
                                    
                                    <textarea id="manualAnswer" placeholder="Nebo napi≈°te odpovƒõƒè ruƒçnƒõ..." 
                                             class="manual-answer-input"></textarea>
                                    
                                    <div class="answer-actions">
                                        <button id="checkAnswer" class="btn-primary">Zkontrolovat odpovƒõƒè</button>
                                        <button id="nextQuestion" class="btn-secondary" disabled>Dal≈°√≠ ot√°zka</button>
                                        <button id="clearAnswer" class="btn-clear">Vymazat</button>
                                    </div>
                                </div>
                            </div>
                            
                            <div id="aiAnalysis" class="ai-analysis hidden">
                                <h3>AI Anal√Ωza odpovƒõdi:</h3>
                                <div id="aiSummary" class="ai-summary"></div>
                                <div id="aiEvaluation" class="ai-evaluation"></div>
                                <div id="aiScore" class="ai-score"></div>
                                <div id="aiRecommendations" class="ai-recommendations"></div>
                            </div>
                        </div>
                        
                        <!-- V√Ωsledky zkou≈°en√≠ -->
                        <div id="oralExamResults" class="exam-results hidden">
                            <h2>üèÜ V√Ωsledky √∫stn√≠ho zkou≈°en√≠</h2>
                            <div id="finalResults" class="final-results"></div>
                            <div class="results-actions">
                                <button id="exportResults" class="btn-primary">Exportovat v√Ωsledky</button>
                                <button id="newOralExam" class="btn-secondary">Nov√© zkou≈°en√≠</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // P≈ôidat do hlavn√≠ho HTML
        document.body.insertAdjacentHTML('beforeend', oralExamHTML);
        console.log('UI pro √∫stn√≠ zkou≈°en√≠ bylo vytvo≈ôeno');
        
        // Okam≈æitƒõ ovƒõ≈ôit p≈ôid√°n√≠ do DOM
        const modal = document.getElementById('oralExamModal');
        const questionCountElement = document.getElementById('questionCount');
        
        if (!modal) {
            console.error('KRITICK√Å CHYBA: Modal nebyl p≈ôid√°n do DOM!');
            return;
        }
        
        if (!questionCountElement) {
            console.error('KRITICK√Å CHYBA: QuestionCount element nebyl p≈ôid√°n do DOM!');
            console.log('V≈°echny input elementy v DOM:', document.querySelectorAll('input').length);
            console.log('V≈°echny elementy s ID questionCount:', document.querySelectorAll('#questionCount').length);
            return;
        }
        
        console.log('‚úÖ Elementy √∫spƒõ≈°nƒõ p≈ôid√°ny do DOM:', {
            modal: !!modal,
            questionCount: !!questionCountElement,
            questionCountValue: questionCountElement.value,
            questionCountType: questionCountElement.type
        });
        
        // Naƒç√≠st dostupn√© hlasy
        this.loadAvailableVoices();
    }
    
    loadAvailableVoices() {
        const voiceSelect = document.getElementById('voiceSelect');
        
        const updateVoices = () => {
            const voices = this.speechSynthesis.getVoices();
            voiceSelect.innerHTML = '<option value="">V√Ωchoz√≠ hlas</option>';
            
            voices.forEach((voice, index) => {
                if (voice.lang.startsWith('cs') || voice.lang.startsWith('sk')) {
                    const option = document.createElement('option');
                    option.value = index;
                    option.textContent = `${voice.name} (${voice.lang})`;
                    voiceSelect.appendChild(option);
                }
            });
        };
        
        updateVoices();
        this.speechSynthesis.onvoiceschanged = updateVoices;
    }
    
    setupEventListeners() {
        // Poƒçkat na naƒçten√≠ DOM, pokud je≈°tƒõ nen√≠ hotov√©
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupEventListeners());
            return;
        }
        
        console.log('Nastavuji event listenery pro √∫stn√≠ zkou≈°en√≠...');
        
        try {
            // Tlaƒç√≠tka pro mod√°l
            this.addEventListenerSafe('closeOralExam', 'click', () => this.closeModal());
            this.addEventListenerSafe('startOralExam', 'click', () => this.startOralExam());
            this.addEventListenerSafe('stopOralExam', 'click', () => this.stopOralExam());
            
            // Audio ovl√°d√°n√≠
            this.addEventListenerSafe('playQuestion', 'click', () => this.playCurrentQuestion());
            this.addEventListenerSafe('pauseQuestion', 'click', () => this.pauseQuestion());
            this.addEventListenerSafe('stopQuestion', 'click', () => this.stopQuestion());
            
            // Nahr√°v√°n√≠
            this.addEventListenerSafe('startRecording', 'click', () => this.startRecording());
            this.addEventListenerSafe('stopRecording', 'click', () => this.stopRecording());
            
            // Akce s odpovƒõƒèmi
            this.addEventListenerSafe('checkAnswer', 'click', () => this.checkCurrentAnswer());
            this.addEventListenerSafe('nextQuestion', 'click', () => this.moveToNextQuestion());
            this.addEventListenerSafe('clearAnswer', 'click', () => this.clearAnswer());
            
            // Nastaven√≠
            this.addEventListenerSafe('speechRate', 'input', (e) => {
                const valueEl = document.getElementById('speechRateValue');
                if (valueEl) valueEl.textContent = e.target.value + 'x';
            });
            
            // V√Ωsledky
            this.addEventListenerSafe('exportResults', 'click', () => this.exportResults());
            this.addEventListenerSafe('newOralExam', 'click', () => this.resetForNewExam());
            
            console.log('Event listenery pro √∫stn√≠ zkou≈°en√≠ nastaveny');
        } catch (error) {
            console.error('Chyba p≈ôi nastavov√°n√≠ event listener≈Ø:', error);
        }
    }
    
    addEventListenerSafe(elementId, event, handler) {
        const element = document.getElementById(elementId);
        if (element) {
            element.addEventListener(event, handler);
        } else {
            console.warn(`Element s ID '${elementId}' nebyl nalezen pro event listener`);
        }
    }
    
    showModal() {
        let modal = document.getElementById('oralExamModal');
        
        if (!modal) {
            console.log('Modal neexistuje, vytv√°≈ô√≠m...');
            this.createOralExamUI();
            modal = document.getElementById('oralExamModal');
            
            if (!modal) {
                console.error('KRITICK√Å CHYBA: Nepoda≈ôilo se vytvo≈ôit modal!');
                return;
            }
        }
        
        modal.classList.remove('hidden');
        
        // Okam≈æitƒõ ovƒõ≈ôit dostupnost kritick√Ωch element≈Ø
        const questionCountElement = document.getElementById('questionCount');
        const tableSelect = document.getElementById('oralExamTable');
        
        console.log('showModal - kontrola element≈Ø:', {
            modal: !!modal,
            questionCount: !!questionCountElement,
            questionCountValue: questionCountElement ? questionCountElement.value : 'NEEXISTUJE',
            tableSelect: !!tableSelect,
            allQuestionCountElements: document.querySelectorAll('#questionCount').length,
            totalInputs: document.querySelectorAll('input').length
        });
        
        if (!questionCountElement) {
            console.error('QuestionCount element st√°le neexistuje! Pokus√≠m se znovu vytvo≈ôit UI...');
            // Odebrat po≈°kozen√Ω modal a vytvo≈ôit nov√Ω
            modal.remove();
            this.createOralExamUI();
            
            // Znovu z√≠skat odkazy
            modal = document.getElementById('oralExamModal');
            const newQuestionCount = document.getElementById('questionCount');
            
            if (!newQuestionCount) {
                console.error('Ani po opƒõtovn√©m vytvo≈ôen√≠ se element nepoda≈ôilo naj√≠t!');
                return;
            } else {
                console.log('‚úÖ Po opƒõtovn√©m vytvo≈ôen√≠ element nalezen:', newQuestionCount.value);
                modal.classList.remove('hidden');
            }
        }
        
        // Naplnit tabulky
        this.populateTableSelect();
        
        // Focus na prvn√≠ element
        if (tableSelect) {
            tableSelect.focus();
        }
    }
    
    closeModal() {
        const modal = document.getElementById('oralExamModal');
        modal.classList.add('hidden');
        
        // Ukonƒçit jak√©koli prob√≠haj√≠c√≠ aktivity
        this.stopQuestion();
        this.stopRecording();
        this.resetSession();
    }
    
    populateTableSelect() {
        const select = document.getElementById('oralExamTable');
        if (!select) {
            console.error('Select element oralExamTable nebyl nalezen');
            return;
        }
        
        select.innerHTML = '<option value="">Vyberte tabulku...</option>';
        
        console.log('Kontroluji dostupnost QUIZ_DATA:', typeof QUIZ_DATA);
        
        if (typeof QUIZ_DATA !== 'undefined' && QUIZ_DATA.tables) {
            const tableNames = Object.keys(QUIZ_DATA.tables);
            console.log('Dostupn√© tabulky:', tableNames.length, tableNames.slice(0, 3));
            
            tableNames.forEach(tableName => {
                const option = document.createElement('option');
                option.value = tableName;
                option.textContent = tableName.replace(/_/g, ' ');
                select.appendChild(option);
            });
            
            console.log(`Bylo naƒçteno ${tableNames.length} tabulek do selectu`);
        } else {
            console.error('QUIZ_DATA nen√≠ dostupn√° nebo neobsahuje tabulky');
            
            // P≈ôidat placeholder options pro debug
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'Data nejsou k dispozici';
            option.disabled = true;
            select.appendChild(option);
        }
    }
    
    async startOralExam() {
        console.log('=== SPOU≈†TƒöN√ç √öSTN√çHO ZKOU≈†EN√ç ===');
        
        // Naj√≠t elementy s podrobn√Ωm debugem
        const tableNameElement = document.getElementById('oralExamTable');
        const questionCountInput = document.getElementById('questionCount');
        const randomOrderElement = document.getElementById('randomOrder');
        
        console.log('Kontrola dostupnosti v≈°ech element≈Ø:', {
            tableNameElement: !!tableNameElement,
            questionCountInput: !!questionCountInput,
            randomOrderElement: !!randomOrderElement,
            tableValue: tableNameElement ? tableNameElement.value : 'NEEXISTUJE',
            questionCountValue: questionCountInput ? questionCountInput.value : 'NEEXISTUJE',
            randomOrderValue: randomOrderElement ? randomOrderElement.checked : 'NEEXISTUJE',
            totalQuestionCountElements: document.querySelectorAll('#questionCount').length,
            allInputElements: document.querySelectorAll('input').length
        });
        
        // Ovƒõ≈ôit kritick√© elementy
        if (!tableNameElement) {
            this.showError('Element pro v√Ωbƒõr tabulky nebyl nalezen. Zkuste obnovit str√°nku.');
            return;
        }
        
        if (!questionCountInput) {
            this.showError('Element pro poƒçet ot√°zek nebyl nalezen. Zkuste obnovit str√°nku.');
            console.error('DETAIL: questionCount input neexistuje!');
            
            // Pokusit se naj√≠t alternativn√≠m zp≈Øsobem
            console.log('üîç Hled√°m v≈°echny number inputy na str√°nce...');
            const allNumberInputs = document.querySelectorAll('input[type="number"]');
            console.log('Nalezeno number input≈Ø:', allNumberInputs.length);
            
            allNumberInputs.forEach((input, index) => {
                console.log(`  Input ${index}: id="${input.id}", value="${input.value}", min="${input.min}", max="${input.max}"`);
            });
            
            // Pokusit se naj√≠t podle hodnoty atribut≈Ø
            const questionCountByAttribute = document.querySelector('input[min="1"][max="50"]');
            console.log('Hled√°n√≠ podle atribut≈Ø (min="1" max="50"):', !!questionCountByAttribute);
            
            if (questionCountByAttribute) {
                console.log('‚úÖ Nalezen element podle atribut≈Ø, hodnota:', questionCountByAttribute.value);
                console.log('   ID tohoto elementu:', questionCountByAttribute.id);
                console.log('   Zkus√≠m pou≈æ√≠t tento element...');
                
                // Pokusit se pou≈æ√≠t nalezen√Ω element
                const value = questionCountByAttribute.value;
                const count = parseInt(value);
                
                if (!isNaN(count) && count > 0) {
                    console.log('üéØ Hodnota z alternativn√≠ho elementu je validn√≠, pokraƒçuji...');
                    // P≈ôi≈ôadit hodnoty z alternativn√≠ho elementu
                    const questionCount = count;
                    const tableName = tableNameElement ? tableNameElement.value : '';
                    const randomOrder = randomOrderElement ? randomOrderElement.checked : true;
                    
                    if (!tableName) {
                        this.showError('Vyberte tabulku ot√°zek.');
                        return;
                    }
                    
                    console.log('Pokraƒçuji s alternativn√≠mi hodnotami:', { tableName, questionCount, randomOrder });
                    // Pokraƒçovat s procesem...
                } else {
                    console.log('‚ùå Hodnota z alternativn√≠ho elementu nen√≠ validn√≠:', value);
                }
            }
            
            return;
        }
        
        if (!randomOrderElement) {
            this.showError('Element pro n√°hodn√© po≈ôad√≠ nebyl nalezen. Zkuste obnovit str√°nku.');
            return;
        }
        
        // Z√≠skat hodnoty
        const tableName = tableNameElement.value;
        const questionCountRaw = questionCountInput.value;
        const questionCount = parseInt(questionCountRaw);
        const randomOrder = randomOrderElement.checked;
        
        console.log('Hodnoty ze v≈°ech element≈Ø:', { 
            tableName, 
            questionCountRaw,
            questionCount, 
            randomOrder,
            isValidQuestionCount: !isNaN(questionCount) && questionCount > 0,
            questionCountType: typeof questionCount
        });
        
        // SPECIAL DEBUG pro undefined hodnoty
        if (questionCountRaw === undefined || questionCountRaw === null || questionCountRaw === '') {
            console.error('üö® PROBL√âM: questionCount input m√° pr√°zdnou hodnotu!');
            console.log('Element detaily:', {
                exists: !!questionCountInput,
                tagName: questionCountInput.tagName,
                type: questionCountInput.type,
                id: questionCountInput.id,
                value: questionCountInput.value,
                hasAttribute: questionCountInput.hasAttribute('value'),
                getAttribute: questionCountInput.getAttribute('value'),
                defaultValue: questionCountInput.defaultValue,
                placeholder: questionCountInput.placeholder
            });
            
            // Pokusit se nastavit v√Ωchoz√≠ hodnotu
            console.log('Pokou≈°√≠m se nastavit v√Ωchoz√≠ hodnotu 5...');
            questionCountInput.value = '5';
            
            // Znovu z√≠skat hodnotu
            const newValue = questionCountInput.value;
            console.log('Hodnota po pokusu o nastaven√≠:', newValue);
            
            if (newValue && newValue !== '') {
                console.log('‚úÖ Poda≈ôilo se nastavit hodnotu, pokraƒçuji...');
                // Pokraƒçovat s novou hodnotou
                const newQuestionCount = parseInt(newValue);
                if (!isNaN(newQuestionCount) && newQuestionCount > 0) {
                    console.log('Pou≈æiji novou hodnotu:', newQuestionCount);
                    // Pokraƒçovat zde s validn√≠ hodnotou...
                }
            } else {
                this.showError('Nepoda≈ôilo se z√≠skat platn√Ω poƒçet ot√°zek. Element je po≈°kozen.');
                return;
            }
        }
        
        // Validace hodnot
        if (!tableName) {
            this.showError('Vyberte tabulku ot√°zek.');
            return;
        }
        
        if (isNaN(questionCount) || questionCount <= 0) {
            this.showError(`Zadejte platn√Ω poƒçet ot√°zek (1 nebo v√≠ce). Aktu√°ln√≠ hodnota: "${questionCountRaw}"`);
            return;
        }
        
        // Ovƒõ≈ôit dostupnost dat
        if (typeof QUIZ_DATA === 'undefined') {
            this.showError('Data kv√≠zu nejsou k dispozici. Naƒçtƒõte je pros√≠m nejprve.');
            return;
        }
        
        if (!QUIZ_DATA.tables || !QUIZ_DATA.tables[tableName]) {
            this.showError('Vybran√° tabulka nebyla nalezena v datech.');
            return;
        }
        
        console.log('‚úÖ V≈°echny validace pro≈°ly, zahajuji zkou≈°en√≠...');
        
        if (!QUIZ_DATA.tables[tableName].questions || QUIZ_DATA.tables[tableName].questions.length === 0) {
            this.showError('Vybran√° tabulka neobsahuje ≈æ√°dn√© ot√°zky.');
            return;
        }
        
        try {
            // P≈ôipravit ot√°zky
            const allQuestions = QUIZ_DATA.tables[tableName].questions;
            console.log('Celkem dostupn√Ωch ot√°zek:', allQuestions.length);
            console.log('Uk√°zka prvn√≠ ot√°zky:', allQuestions[0]);
            console.log('Po≈æadovan√Ω poƒçet ot√°zek:', questionCount);
            
            // Omezit poƒçet ot√°zek na dostupn√© mno≈æstv√≠
            const actualQuestionCount = Math.min(questionCount, allQuestions.length);
            console.log('Skuteƒçn√Ω poƒçet ot√°zek k naƒçten√≠:', actualQuestionCount);
            
            let questions = allQuestions.slice(0, actualQuestionCount);
            console.log('Ot√°zky po slice():', questions.length);
            
            if (randomOrder) {
                questions = this.shuffleArray(questions);
                console.log('Ot√°zky po shuffle():', questions.length);
            }
            
            console.log('P≈ôipraven√© ot√°zky pro zkou≈°en√≠:', questions.length);
            
            // Debug: Kontrola integrity dat
            if (questions.length > 0) {
                console.log('Prvn√≠ ot√°zka m√° vlastnost otazka:', !!questions[0].otazka);
                console.log('Prvn√≠ ot√°zka m√° vlastnost spravna_odpoved:', !!questions[0].spravna_odpoved);
                console.log('Obsah prvn√≠ ot√°zky:', {
                    id: questions[0].id,
                    otazka: questions[0].otazka ? questions[0].otazka.substring(0, 50) + '...' : 'CHYB√ç',
                    spravna_odpoved: questions[0].spravna_odpoved ? questions[0].spravna_odpoved.substring(0, 30) + '...' : 'CHYB√ç'
                });
                
                // Ovƒõ≈ôit, ≈æe ot√°zky maj√≠ pot≈ôebn√° pole
                const validQuestions = questions.filter(q => q.otazka && q.spravna_odpoved);
                if (validQuestions.length !== questions.length) {
                    console.warn(`Nƒõkter√© ot√°zky nejsou kompletn√≠. Pou≈æij√≠ se pouze validn√≠: ${validQuestions.length}/${questions.length}`);
                    questions = validQuestions;
                }
            }
            
            // Fin√°ln√≠ kontrola p≈ôed inicializac√≠
            if (questions.length === 0) {
                console.error('KRITICK√Å CHYBA: Po v≈°ech kontrol√°ch je pole ot√°zek pr√°zdn√©');
                this.showError('Nepoda≈ôilo se naƒç√≠st ≈æ√°dn√© validn√≠ ot√°zky pro zkou≈°en√≠.');
                return;
            }
            
            console.log('‚úÖ Fin√°ln√≠ poƒçet ot√°zek pro zkou≈°en√≠:', questions.length);
            
            // Inicializovat promƒõnn√©
            this.currentQuestions = questions;
            this.currentQuestionIndex = 0;
            this.examResults = [];
            this.isActive = true;
            
            // P≈ôepnout UI
            document.getElementById('oralExamSettings').classList.add('hidden');
            document.getElementById('oralExamSession').classList.remove('hidden');
            document.getElementById('startOralExam').disabled = true;
            document.getElementById('stopOralExam').disabled = false;
            
            console.log('UI p≈ôepnuto, naƒç√≠t√°m prvn√≠ ot√°zku...');
            console.log('currentQuestions.length:', this.currentQuestions.length);
            console.log('currentQuestionIndex:', this.currentQuestionIndex);
            
            // Zaƒç√≠t s prvn√≠ ot√°zkou
            await this.loadCurrentQuestion();
            
        } catch (error) {
            console.error('Chyba p≈ôi spou≈°tƒõn√≠ zkou≈°en√≠:', error);
            this.showError('Chyba p≈ôi spou≈°tƒõn√≠ zkou≈°en√≠: ' + error.message);
        }
    }
    
    async loadCurrentQuestion() {
        console.log('Naƒç√≠t√°m ot√°zku - VSTUP:', {
            currentIndex: this.currentQuestionIndex,
            currentQuestions: this.currentQuestions,
            totalQuestions: this.currentQuestions ? this.currentQuestions.length : 'undefined',
            hasQuestions: !!this.currentQuestions,
            isArray: Array.isArray(this.currentQuestions),
            isActive: this.isActive
        });
        
        // Explicitn√≠ kontrola - pokud nejsou ot√°zky nebo je index mimo rozsah
        if (!this.currentQuestions || !Array.isArray(this.currentQuestions)) {
            console.error('CHYBA: currentQuestions nen√≠ pole:', this.currentQuestions);
            this.showError('Nepoda≈ôilo se naƒç√≠st ot√°zky. Zkuste to pros√≠m znovu.');
            return;
        }
        
        if (this.currentQuestions.length === 0) {
            console.error('CHYBA: currentQuestions je pr√°zdn√© pole');
            this.showError('Nejsou k dispozici ≈æ√°dn√© ot√°zky pro zkou≈°en√≠.');
            return;
        }
        
        if (this.currentQuestionIndex >= this.currentQuestions.length) {
            console.log('Konƒç√≠m zkou≈°en√≠ - v≈°echny ot√°zky zodpovƒõzeny (index:', this.currentQuestionIndex, 'z', this.currentQuestions.length, ')');
            this.finishExam();
            return;
        }
        
        const question = this.currentQuestions[this.currentQuestionIndex];
        console.log('Naƒç√≠t√°m ot√°zku #' + (this.currentQuestionIndex + 1) + ':', question.otazka.substring(0, 50) + '...');
        
        // Kontrola integrity ot√°zky
        if (!question.otazka || !question.spravna_odpoved) {
            console.error('CHYBA: Ot√°zka neobsahuje povinn√° pole:', {
                hasOtazka: !!question.otazka,
                hasSpravnaOdpoved: !!question.spravna_odpoved,
                question: question
            });
            this.showError('Chyba v datech ot√°zky. P≈ôech√°z√≠m na dal≈°√≠ ot√°zku.');
            this.currentQuestionIndex++;
            this.loadCurrentQuestion();
            return;
        }
        
        this.currentQuestion = question;
        
        // Spustit tracking ƒçasu pro statistiky
        if (window.app && app.statistics) {
            app.statistics.startQuestion();
        }
        
        // Aktualizovat UI
        document.getElementById('currentQuestionNumber').textContent = this.currentQuestionIndex + 1;
        document.getElementById('totalQuestions').textContent = this.currentQuestions.length;
        document.getElementById('currentQuestionText').textContent = question.otazka;
        
        // Aktualizovat progress bar
        const progress = ((this.currentQuestionIndex + 1) / this.currentQuestions.length) * 100;
        document.getElementById('oralProgressFill').style.width = progress + '%';
        
        // Vyƒçistit p≈ôedchoz√≠ odpovƒõdi
        this.clearAnswer();
        
        // Skr√Ωt AI anal√Ωzu
        document.getElementById('aiAnalysis').classList.add('hidden');
        document.getElementById('nextQuestion').disabled = true;
        
        console.log('Ot√°zka naƒçtena, spou≈°t√≠m TTS za 500ms...');
        
        // Automaticky p≈ôehr√°t ot√°zku
        setTimeout(() => this.playCurrentQuestion(), 500);
    }
    
    playCurrentQuestion() {
        if (!this.currentQuestion) return;
        
        this.stopQuestion(); // Zastavit p≈ôedchoz√≠ p≈ôehr√°v√°n√≠
        
        const text = this.currentQuestion.otazka;
        const speechRate = parseFloat(document.getElementById('speechRate').value);
        const voiceIndex = document.getElementById('voiceSelect').value;
        
        this.currentUtterance = new SpeechSynthesisUtterance(text);
        this.currentUtterance.rate = speechRate;
        this.currentUtterance.lang = 'cs-CZ';
        
        if (voiceIndex) {
            const voices = this.speechSynthesis.getVoices();
            this.currentUtterance.voice = voices[voiceIndex];
        }
        
        this.currentUtterance.onstart = () => {
            document.getElementById('playQuestion').disabled = true;
            document.getElementById('pauseQuestion').disabled = false;
            document.getElementById('stopQuestion').disabled = false;
        };
        
        this.currentUtterance.onend = () => {
            document.getElementById('playQuestion').disabled = false;
            document.getElementById('pauseQuestion').disabled = true;
            document.getElementById('stopQuestion').disabled = true;
        };
        
        this.speechSynthesis.speak(this.currentUtterance);
    }
    
    pauseQuestion() {
        this.speechSynthesis.pause();
    }
    
    stopQuestion() {
        if (this.currentUtterance) {
            this.speechSynthesis.cancel();
            document.getElementById('playQuestion').disabled = false;
            document.getElementById('pauseQuestion').disabled = true;
            document.getElementById('stopQuestion').disabled = true;
        }
    }
    
    startRecording() {
        if (!this.speechRecognition) {
            this.showError('Speech Recognition nen√≠ k dispozici v tomto prohl√≠≈æeƒçi.');
            return;
        }
        
        // Zastavit p≈ôehr√°v√°n√≠ ot√°zky
        this.stopQuestion();
        
        try {
            this.speechRecognition.start();
        } catch (error) {
            this.showError('Chyba p≈ôi spou≈°tƒõn√≠ nahr√°v√°n√≠: ' + error.message);
        }
    }
    
    stopRecording() {
        if (this.speechRecognition && this.isRecording) {
            this.speechRecognition.stop();
        }
    }
    
    updateRecordingUI(isRecording) {
        const startBtn = document.getElementById('startRecording');
        const stopBtn = document.getElementById('stopRecording');
        const indicator = document.getElementById('recordingIndicator');
        
        startBtn.disabled = isRecording;
        stopBtn.disabled = !isRecording;
        
        if (isRecording) {
            indicator.classList.remove('hidden');
        } else {
            indicator.classList.add('hidden');
        }
    }
    
    updateTranscriptUI(finalTranscript, interimTranscript) {
        const finalTextEl = document.getElementById('finalText');
        const interimTextEl = document.getElementById('interimText');
        
        finalTextEl.textContent = finalTranscript;
        interimTextEl.textContent = interimTranscript;
        
        // Aktualizovat tak√© manu√°ln√≠ pole
        const manualAnswer = document.getElementById('manualAnswer');
        if (finalTranscript) {
            manualAnswer.value = finalTranscript;
        }
    }
    
    clearAnswer() {
        document.getElementById('finalText').textContent = '';
        document.getElementById('interimText').textContent = '';
        document.getElementById('manualAnswer').value = '';
    }
    
    async checkCurrentAnswer() {
        const userAnswer = document.getElementById('manualAnswer').value.trim();
        
        if (!userAnswer) {
            this.showError('Zadejte odpovƒõƒè p≈ôed kontrolou.');
            return;
        }
        
        const checkBtn = document.getElementById('checkAnswer');
        checkBtn.disabled = true;
        checkBtn.textContent = 'Analyzuji...';
        
        try {
            // Pokusit se o AI anal√Ωzu, ale s fallbackem
            let analysis;
            try {
                analysis = await this.analyzeAnswerWithAI(
                    this.currentQuestion.otazka,
                    this.currentQuestion.spravna_odpoved,
                    userAnswer,
                    this.currentQuestion.vysvetleni
                );
            } catch (aiError) {
                console.warn('AI anal√Ωza selhala, pou≈æ√≠v√°m lok√°ln√≠ hodnocen√≠:', aiError.message);
                // Fallback na lok√°ln√≠ hodnocen√≠
                analysis = this.analyzeAnswerLocally(
                    this.currentQuestion.otazka,
                    this.currentQuestion.spravna_odpoved,
                    userAnswer,
                    this.currentQuestion.vysvetleni
                );
            }
            
            this.displayAIAnalysis(analysis);
            document.getElementById('nextQuestion').disabled = false;
            
            // Zaznamenat statistiky pro √∫stn√≠ zkou≈°en√≠
            if (app.statistics) {
                app.statistics.recordOralExamAnswer(analysis.score, 100, 'oral');
            }
            
            // Ulo≈æit v√Ωsledek
            this.examResults.push({
                question: this.currentQuestion.otazka,
                correctAnswer: this.currentQuestion.spravna_odpoved,
                userAnswer: userAnswer,
                analysis: analysis,
                timestamp: new Date().toISOString()
            });
            
        } catch (error) {
            this.showError('Chyba p≈ôi anal√Ωze odpovƒõdi: ' + error.message);
        } finally {
            checkBtn.disabled = false;
            checkBtn.textContent = 'Zkontrolovat odpovƒõƒè';
        }
    }
    
    analyzeAnswerLocally(question, correctAnswer, userAnswer, explanation) {
        console.log('üîç Lok√°ln√≠ hodnocen√≠ - vstup:', {
            question: question.substring(0, 50) + '...',
            correctAnswer: correctAnswer.substring(0, 50) + '...',
            userAnswer: userAnswer.substring(0, 50) + '...'
        });
        
        // Jednoduch√© normalizov√°n√≠ textu
        const normalize = (text) => {
            if (!text) return '';
            return text.toLowerCase()
                .replace(/[√°√†√¢√§√£]/g, 'a')
                .replace(/[√©√®√™√´]/g, 'e')
                .replace(/[√≠√¨√Æ√Ø]/g, 'i')
                .replace(/[√≥√≤√¥√∂√µ]/g, 'o')
                .replace(/[√∫√π√ª√º]/g, 'u')
                .replace(/[√Ω√ø]/g, 'y')
                .replace(/≈à/g, 'n')
                .replace(/ƒç/g, 'c')
                .replace(/≈ô/g, 'r')
                .replace(/≈°/g, 's')
                .replace(/≈•/g, 't')
                .replace(/≈æ/g, 'z')
                .replace(/ƒè/g, 'd')
                .replace(/[^a-z0-9\s]/g, ' ')
                .replace(/\s+/g, ' ')
                .trim();
        };
        
        const normalizedCorrect = normalize(correctAnswer);
        const normalizedUser = normalize(userAnswer);
        
        console.log('üìù Normalizovan√© texty:', {
            correct: normalizedCorrect,
            user: normalizedUser
        });
        
        // Z√°kladn√≠ hodnocen√≠
        let score = 0;
        let positives = [];
        let negatives = [];
        let recommendations = [];
        
        // 1. Pokud je odpovƒõƒè identick√° = 100%
        if (normalizedCorrect === normalizedUser) {
            score = 100;
            positives.push('Odpovƒõƒè je naprosto p≈ôesn√° a spr√°vn√°');
            console.log('‚úÖ Identick√° odpovƒõƒè - 100 bod≈Ø');
        } else if (normalizedUser.length === 0) {
            // 2. Pr√°zdn√° odpovƒõƒè = 0%
            score = 0;
            negatives.push('Nebyla zad√°na ≈æ√°dn√° odpovƒõƒè');
            recommendations.push('Pokuste se odpovƒõdƒõt na ot√°zku');
            console.log('‚ùå Pr√°zdn√° odpovƒõƒè - 0 bod≈Ø');
        } else {
            // 3. ƒå√°steƒçn√© hodnocen√≠ podle podobnosti
            const correctWords = normalizedCorrect.split(' ').filter(w => w.length > 2);
            const userWords = normalizedUser.split(' ').filter(w => w.length > 2);
            
            console.log('üî§ Slova pro porovn√°n√≠:', {
                correctWords: correctWords,
                userWords: userWords
            });
            
            // Naj√≠t spoleƒçn√° slova
            let matchingWords = 0;
            correctWords.forEach(correctWord => {
                if (userWords.some(userWord => 
                    userWord === correctWord || 
                    userWord.includes(correctWord) || 
                    correctWord.includes(userWord)
                )) {
                    matchingWords++;
                }
            });
            
            console.log(`üéØ Nalezeno ${matchingWords}/${correctWords.length} spoleƒçn√Ωch slov`);
            
            // V√Ωpoƒçet sk√≥re
            const wordMatchRatio = correctWords.length > 0 ? (matchingWords / correctWords.length) : 0;
            
            // Z√°kladn√≠ sk√≥re z pomƒõru slov (0-70 bod≈Ø)
            score = Math.round(wordMatchRatio * 70);
            
            // Bonus za d√©lku odpovƒõdi (0-15 bod≈Ø)
            const lengthBonus = Math.min(Math.round(userAnswer.length / 10), 15);
            score += lengthBonus;
            
            // Bonus za snahu (5 bod≈Ø pokud odpovƒõƒè nen√≠ pr√°zdn√°)
            score += 5;
            
            // Omezit na maximum 95 pro nep≈ôesn√© odpovƒõdi
            score = Math.min(score, 95);
            
            console.log('üìä V√Ωpoƒçet sk√≥re:', {
                wordMatchRatio: wordMatchRatio.toFixed(2),
                baseScore: Math.round(wordMatchRatio * 70),
                lengthBonus: lengthBonus,
                finalScore: score
            });
            
            // Pozitiva a negativa
            if (matchingWords > 0) {
                positives.push(`Obsahuje ${matchingWords} kl√≠ƒçov√Ωch pojm≈Ø ze spr√°vn√© odpovƒõdi`);
            }
            if (userAnswer.length > 20) {
                positives.push('Podrobn√° odpovƒõƒè ukazuje snahu o vysvƒõtlen√≠');
            }
            if (wordMatchRatio > 0.5) {
                positives.push('Zachycuje hlavn√≠ my≈°lenku ot√°zky');
            }
            
            if (matchingWords === 0) {
                negatives.push('Odpovƒõƒè neobsahuje kl√≠ƒçov√© pojmy ze spr√°vn√© odpovƒõdi');
            }
            if (wordMatchRatio < 0.3) {
                negatives.push('Chyb√≠ vƒõt≈°ina d≈Øle≈æit√Ωch informac√≠');
            }
            if (userAnswer.length < 10) {
                negatives.push('Odpovƒõƒè je p≈ô√≠li≈° struƒçn√°');
            }
            
            // Doporuƒçen√≠
            if (wordMatchRatio < 0.5) {
                recommendations.push('Zamƒõ≈ôte se na kl√≠ƒçov√© pojmy ze spr√°vn√© odpovƒõdi');
            }
            if (userAnswer.length < 20) {
                recommendations.push('Pokuste se odpovƒõƒè v√≠ce rozvinout');
            }
            recommendations.push('Srovnejte svou odpovƒõƒè se spr√°vnou odpovƒõd√≠');
        }
        
        // Urƒçen√≠ zn√°mky
        let grade;
        if (score >= 90) grade = 'A';
        else if (score >= 75) grade = 'B';
        else if (score >= 60) grade = 'C';
        else if (score >= 45) grade = 'D';
        else grade = 'F';
        
        // Zajistit minim√°ln√≠ hodnoty
        if (positives.length === 0) {
            positives.push('Student odpovƒõdƒõl na ot√°zku');
        }
        if (negatives.length === 0 && score < 90) {
            negatives.push('Odpovƒõƒè by mohla b√Ωt p≈ôesnƒõj≈°√≠');
        }
        if (recommendations.length === 0) {
            recommendations.push('Pokraƒçujte v uƒçen√≠');
        }
        
        const result = {
            summary: userAnswer.length > 100 ? userAnswer.substring(0, 100) + '...' : userAnswer,
            score: score,
            scoreBreakdown: {
                factual: Math.round(score * 0.4),
                completeness: Math.round(score * 0.3),
                clarity: Math.round(score * 0.2),
                structure: Math.round(score * 0.1)
            },
            positives: positives,
            negatives: negatives,
            recommendations: recommendations,
            grade: grade,
            method: 'local'
        };
        
        console.log('üéØ Fin√°ln√≠ lok√°ln√≠ hodnocen√≠:', result);
        return result;
    }
    
    calculateSimilarity(str1, str2) {
        const longer = str1.length > str2.length ? str1 : str2;
        const shorter = str1.length > str2.length ? str2 : str1;
        
        if (longer.length === 0) return 1.0;
        
        const distance = this.levenshteinDistance(longer, shorter);
        return (longer.length - distance) / longer.length;
    }
    
    levenshteinDistance(str1, str2) {
        const matrix = [];
        
        for (let i = 0; i <= str2.length; i++) {
            matrix[i] = [i];
        }
        
        for (let j = 0; j <= str1.length; j++) {
            matrix[0][j] = j;
        }
        
        for (let i = 1; i <= str2.length; i++) {
            for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j] + 1
                    );
                }
            }
        }
        
        return matrix[str2.length][str1.length];
    }

    async analyzeAnswerWithAI(question, correctAnswer, userAnswer, explanation) {
        // Zkusit v√≠ce mo≈ænost√≠ pro AI anal√Ωzu
        const attempts = [
            // 1. P≈Øvodn√≠ direct API call
            () => this.directAPICall(question, correctAnswer, userAnswer, explanation),
            
            // 2. CORS Proxy p≈ô√≠stup
            () => this.corsProxyAPICall(question, correctAnswer, userAnswer, explanation),
            
            // 3. Alternativn√≠ free API
            () => this.alternativeAPICall(question, correctAnswer, userAnswer, explanation)
        ];
        
        for (let i = 0; i < attempts.length; i++) {
            try {
                console.log(`Pokus ${i + 1} pro AI anal√Ωzu...`);
                const result = await attempts[i]();
                console.log(`‚úÖ AI anal√Ωza √∫spƒõ≈°n√° (pokus ${i + 1})`);
                return result;
            } catch (error) {
                console.warn(`‚ùå Pokus ${i + 1} selhal:`, error.message);
                if (i === attempts.length - 1) {
                    throw error; // Jen posledn√≠ chyba se propaguje
                }
            }
        }
    }
    
    async directAPICall(question, correctAnswer, userAnswer, explanation) {
        console.log('üîÑ Pokus o backend proxy API call...');
        
        // Backend proxy URL (lok√°ln√≠ server)
        const backendUrl = 'http://localhost:5000/api/monica/evaluate';
        
        try {
            const response = await fetch(backendUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    question: question,
                    correctAnswer: correctAnswer,
                    userAnswer: userAnswer,
                    explanation: explanation
                })
            });
            
            console.log('üì° Backend proxy response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.log('üì° Backend error:', errorText);
                throw new Error(`Backend Error: ${response.status} - ${errorText}`);
            }
            
            const result = await response.json();
            console.log('üì° Backend response:', result);
            
            // P≈ôidat informaci o metodƒõ
            result.method = 'backend-proxy';
            console.log('‚úÖ Backend proxy API √∫spƒõ≈°n√©!');
            return result;
            
        } catch (error) {
            console.log('‚ùå Backend proxy selhalo:', error.message);
            
            // Pokud je to network error, zkus√≠me fallback na direct API
            if (error.message.includes('fetch')) {
                console.log('üîÑ Backend nedostupn√Ω, zkou≈°√≠m direct API...');
                return await this.directAPIFallback(question, correctAnswer, userAnswer, explanation);
            }
            
            throw error;
        }
    }
    
    // Fallback na p≈Øvodn√≠ direct API pokud backend nen√≠ dostupn√Ω
    async directAPIFallback(question, correctAnswer, userAnswer, explanation) {
        console.log('üîÑ Fallback na direct API...');
        
        // Nejprve po≈æ√°d√°me o povolen√≠ od u≈æivatele
        const permissionGranted = await this.requestCORSPermission();
        if (!permissionGranted) {
            console.log('‚ùå U≈æivatel zam√≠tl CORS povolen√≠');
            throw new Error('CORS permission denied by user');
        }
        
        const prompt = `Vyhodno≈• odpovƒõƒè studenta na ot√°zku:

OT√ÅZKA: ${question}
SPR√ÅVN√Å ODPOVƒöƒé: ${correctAnswer}
ODPOVƒöƒé STUDENTA: ${userAnswer}

Vra≈• JSON s hodnocen√≠m:
{
  "summary": "shrnut√≠ odpovƒõdi",
  "score": ƒç√≠slo_0_a≈æ_100,
  "positives": ["pozitivum"],
  "negatives": ["nedostatek"],
  "recommendations": ["doporuƒçen√≠"],
  "grade": "A/B/C/D/F"
}`;

        try {
            const response = await fetch("https://openapi.monica.im/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer sk-049nXVgkhXvC1mJIMdyuvOFPlc-GEGtec2OhmpnkeQ6Ksrz47edYR8bQRZmtYkLlQT0AIJpN-Hgc3l0a5wfjubpu4Z2O`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    "model": "gpt-4o",
                    "messages": [
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    "temperature": 0.3,
                    "max_tokens": 800
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                const aiResponse = data.choices[0].message.content;
                
                try {
                    const result = JSON.parse(aiResponse);
                    
                    // Ensure scoreBreakdown exists
                    if (!result.scoreBreakdown) {
                        result.scoreBreakdown = {
                            factual: Math.round((result.score || 0) * 0.4),
                            completeness: Math.round((result.score || 0) * 0.3),
                            clarity: Math.round((result.score || 0) * 0.2),
                            structure: Math.round((result.score || 0) * 0.1)
                        };
                    }
                    
                    result.method = 'direct-fallback';
                    console.log('‚úÖ Direct API fallback √∫spƒõ≈°n√©!');
                    return result;
                } catch (parseError) {
                    throw new Error('Nepoda≈ôilo se parsovat AI odpovƒõƒè');
                }
            } else {
                throw new Error(`Direct API Error: ${response.status}`);
            }
            
        } catch (error) {
            console.log('‚ùå Direct API fallback tak√© selhal:', error.message);
            throw error;
        }
    }
    
    // Nov√° metoda pro vy≈æ√°d√°n√≠ CORS povolen√≠
    async requestCORSPermission() {
        // Zkontrolovat ulo≈æen√© povolen√≠
        const savedPermission = localStorage.getItem('monica_cors_permission');
        if (savedPermission) {
            const permission = JSON.parse(savedPermission);
            const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
            if (permission.granted && permission.timestamp > oneDayAgo) {
                console.log('‚úÖ CORS povolen√≠ ji≈æ udƒõleno');
                return true;
            }
        }
        
        return new Promise((resolve) => {
            // Vytvo≈ôit modal dialog
            const modal = this.createCORSPermissionModal();
            document.body.appendChild(modal);
            
            const allowBtn = modal.querySelector('.cors-allow-btn');
            const denyBtn = modal.querySelector('.cors-deny-btn');
            
            allowBtn.onclick = () => {
                const permission = {
                    granted: true,
                    timestamp: Date.now(),
                    origin: window.location.origin
                };
                localStorage.setItem('monica_cors_permission', JSON.stringify(permission));
                document.body.removeChild(modal);
                console.log('‚úÖ U≈æivatel povolil CORS p≈ô√≠stup');
                resolve(true);
            };
            
            denyBtn.onclick = () => {
                const permission = {
                    granted: false,
                    timestamp: Date.now(),
                    origin: window.location.origin
                };
                localStorage.setItem('monica_cors_permission', JSON.stringify(permission));
                document.body.removeChild(modal);
                console.log('‚ùå U≈æivatel zam√≠tl CORS p≈ô√≠stup');
                resolve(false);
            };
            
            // Auto-close po 30 sekund√°ch
            setTimeout(() => {
                if (document.body.contains(modal)) {
                    document.body.removeChild(modal);
                    console.log('‚è∞ CORS dialog timeout');
                    resolve(false);
                }
            }, 30000);
        });
    }
    
    createCORSPermissionModal() {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: Arial, sans-serif;
        `;
        
        modal.innerHTML = `
            <div style="
                background: white;
                padding: 30px;
                border-radius: 10px;
                max-width: 500px;
                text-align: center;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            ">
                <h2 style="color: #333; margin-bottom: 20px;">üîí AI API P≈ô√≠stup</h2>
                <p style="color: #666; margin-bottom: 15px;">
                    Aplikace pot≈ôebuje p≈ô√≠stup k Monica AI API pro hodnocen√≠ va≈°ich odpovƒõd√≠.
                </p>
                <p style="color: #666; margin-bottom: 15px;">
                    <strong>URL:</strong> https://openapi.monica.im
                </p>
                <p style="color: #888; font-size: 14px; margin-bottom: 25px;">
                    Toto m≈Ø≈æe b√Ωt blokov√°no CORS policy prohl√≠≈æeƒçe. Povolen√≠m udƒõlujete souhlas s p≈ôipojen√≠m k extern√≠ AI slu≈æbƒõ.
                </p>
                <div>
                    <button class="cors-allow-btn" style="
                        background: #28a745;
                        color: white;
                        padding: 12px 24px;
                        border: none;
                        border-radius: 5px;
                        margin: 0 10px;
                        cursor: pointer;
                        font-weight: bold;
                        font-size: 16px;
                    ">‚úÖ Povolit p≈ô√≠stup</button>
                    <button class="cors-deny-btn" style="
                        background: #dc3545;
                        color: white;
                        padding: 12px 24px;
                        border: none;
                        border-radius: 5px;
                        margin: 0 10px;
                        cursor: pointer;
                        font-weight: bold;
                        font-size: 16px;
                    ">‚ùå Zam√≠tnout</button>
                </div>
                <p style="color: #999; font-size: 12px; margin-top: 15px;">
                    Povolen√≠ bude ulo≈æeno na 24 hodin
                </p>
            </div>
        `;
        
        return modal;
    }
    
    // Metoda 2: JSONP style approach (experiment√°ln√≠)
    async jsonpAPICall(question, correctAnswer, userAnswer, explanation) {
        console.log('üîÑ Pokus o JSONP style API call...');
        
        return new Promise((resolve, reject) => {
            // Vytvo≈ô√≠me jedineƒçn√Ω callback n√°zev
            const callbackName = 'monicaCallback_' + Date.now();
            
            // P≈ôiprav√≠me data pro API
            const requestData = {
                model: "gpt-4o",
                messages: [
                    {
                        role: "user",
                        content: `Vyhodno≈• odpovƒõƒè studenta. Ot√°zka: ${question}. Spr√°vn√° odpovƒõƒè: ${correctAnswer}. Odpovƒõƒè studenta: ${userAnswer}. Vra≈• JSON s hodnocen√≠m.`
                    }
                ],
                temperature: 0.3,
                max_tokens: 800
            };
            
            // Glob√°ln√≠ callback funkce
            window[callbackName] = function(data) {
                try {
                    if (data.choices && data.choices[0] && data.choices[0].message) {
                        const result = JSON.parse(data.choices[0].message.content);
                        
                        // Ensure scoreBreakdown exists
                        if (!result.scoreBreakdown) {
                            result.scoreBreakdown = {
                                factual: Math.round((result.score || 0) * 0.4),
                                completeness: Math.round((result.score || 0) * 0.3),
                                clarity: Math.round((result.score || 0) * 0.2),
                                structure: Math.round((result.score || 0) * 0.1)
                            };
                        }
                        
                        result.method = 'ai-jsonp';
                        resolve(result);
                    } else {
                        reject(new Error('Neoƒçek√°van√Ω form√°t JSONP odpovƒõdi'));
                    }
                } catch (error) {
                    reject(error);
                } finally {
                    // Cleanup
                    delete window[callbackName];
                    document.head.removeChild(script);
                }
            };
            
            // Vytvo≈ô√≠me script element pro JSONP
            const script = document.createElement('script');
            script.onerror = () => {
                delete window[callbackName];
                reject(new Error('JSONP request failed'));
            };
            
            // JSONP URL (pokud by Monica API podporovala JSONP)
            const jsonpUrl = `https://openapi.monica.im/v1/chat/completions?callback=${callbackName}&` +
                `data=${encodeURIComponent(JSON.stringify(requestData))}&` +
                `auth=${encodeURIComponent('Bearer sk-049nXVgkhXvC1mJIMdyuvOFPlc-GEGtec2OhmpnkeQ6Ksrz47edYR8bQRZmtYkLlQT0AIJpN-Hgc3l0a5wfjubpu4Z2O')}`;
            
            script.src = jsonpUrl;
            document.head.appendChild(script);
            
            // Timeout after 10 seconds
            setTimeout(() => {
                if (window[callbackName]) {
                    delete window[callbackName];
                    document.head.removeChild(script);
                    reject(new Error('JSONP timeout'));
                }
            }, 10000);
        });
    }
    
    // Metoda 3: PostMessage iframe approach
    async iframeAPICall(question, correctAnswer, userAnswer, explanation) {
        console.log('üîÑ Pokus o iframe API call...');
        
        return new Promise((resolve, reject) => {
            // Vytvo≈ô√≠me iframe s proxy str√°nkou
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            iframe.src = 'data:text/html;charset=utf-8,' + encodeURIComponent(`
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                </head>
                <body>
                    <script>
                        async function callAPI() {
                            try {
                                const response = await fetch('https://openapi.monica.im/v1/chat/completions', {
                                    method: 'POST',
                                    headers: {
                                        'Authorization': 'Bearer sk-049nXVgkhXvC1mJIMdyuvOFPlc-GEGtec2OhmpnkeQ6Ksrz47edYR8bQRZmtYkLlQT0AIJpN-Hgc3l0a5wfjubpu4Z2O',
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        model: 'gpt-4o',
                                        messages: [{
                                            role: 'user',
                                            content: 'Test iframe approach'
                                        }],
                                        max_tokens: 50
                                    })
                                });
                                
                                if (response.ok) {
                                    const data = await response.json();
                                    parent.postMessage({success: true, data: data}, '*');
                                } else {
                                    parent.postMessage({success: false, error: 'HTTP ' + response.status}, '*');
                                }
                            } catch (error) {
                                parent.postMessage({success: false, error: error.message}, '*');
                            }
                        }
                        
                        window.addEventListener('message', function(event) {
                            if (event.data.action === 'callAPI') {
                                callAPI();
                            }
                        });
                        
                        // Auto-start
                        callAPI();
                    </script>
                </body>
                </html>
            `);
            
            // Listen for message from iframe
            const messageHandler = (event) => {
                if (event.source === iframe.contentWindow) {
                    window.removeEventListener('message', messageHandler);
                    document.body.removeChild(iframe);
                    
                    if (event.data.success) {
                        try {
                            const result = {
                                summary: "Iframe test √∫spƒõ≈°n√Ω",
                                score: 85,
                                positives: ["Iframe komunikace funguje"],
                                negatives: [],
                                recommendations: ["Implementovat pln√© API vol√°n√≠"],
                                grade: "B",
                                method: 'ai-iframe'
                            };
                            resolve(result);
                        } catch (parseError) {
                            reject(parseError);
                        }
                    } else {
                        reject(new Error('Iframe API call failed: ' + event.data.error));
                    }
                }
            };
            
            window.addEventListener('message', messageHandler);
            document.body.appendChild(iframe);
            
            // Timeout after 15 seconds
            setTimeout(() => {
                window.removeEventListener('message', messageHandler);
                if (document.body.contains(iframe)) {
                    document.body.removeChild(iframe);
                }
                reject(new Error('Iframe timeout'));
            }, 15000);
        });
    }
    
    async corsProxyAPICall(question, correctAnswer, userAnswer, explanation) {
        console.log('üîÑ Pokus o CORS proxy call...');
        
        const prompt = `Ohodno≈• odpovƒõƒè studenta. 
        
OT√ÅZKA: ${question}
SPR√ÅVN√Å ODPOVƒöƒé: ${correctAnswer}
ODPOVƒöƒé STUDENTA: ${userAnswer}

Vra≈• JSON form√°t:
{
  "summary": "shrnut√≠ odpovƒõdi",
  "score": ƒç√≠slo_0_a≈æ_100,
  "positives": ["pozitivum 1", "pozitivum 2"],
  "negatives": ["nedostatek 1", "nedostatek 2"],
  "recommendations": ["doporuƒçen√≠ 1", "doporuƒçen√≠ 2"],
  "grade": "A/B/C/D/F"
}`;

        // Zkus√≠me nƒõkolik r≈Øzn√Ωch CORS proxy slu≈æeb
        const proxies = [
            'https://api.allorigins.win/raw?url=',
            'https://cors-anywhere.herokuapp.com/',
            'https://api.codetabs.com/v1/proxy?quest='
        ];

        for (let i = 0; i < proxies.length; i++) {
            const proxyUrl = proxies[i];
            const targetUrl = this.apiUrl;
            
            try {
                console.log(`üîÑ Zkou≈°√≠m proxy ${i + 1}/${proxies.length}: ${proxyUrl}`);
                
                let finalUrl;
                if (proxyUrl.includes('allorigins')) {
                    finalUrl = `${proxyUrl}${encodeURIComponent(targetUrl)}`;
                } else if (proxyUrl.includes('codetabs')) {
                    finalUrl = `${proxyUrl}${encodeURIComponent(targetUrl)}`;
                } else {
                    finalUrl = proxyUrl + targetUrl;
                }
                
                const response = await fetch(finalUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.apiKey}`,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        model: 'gpt-3.5-turbo',
                        messages: [
                            {
                                role: 'user',
                                content: prompt
                            }
                        ],
                        temperature: 0.3,
                        max_tokens: 800
                    })
                });
                
                console.log(`üì° Proxy ${i + 1} response status:`, response.status);
                
                if (!response.ok) {
                    throw new Error(`CORS Proxy Error: ${response.status}`);
                }
                
                const data = await response.json();
                const aiResponse = data.choices[0].message.content;
                
                try {
                    const result = JSON.parse(aiResponse);
                    
                    // Ensure scoreBreakdown exists
                    if (!result.scoreBreakdown) {
                        result.scoreBreakdown = {
                            factual: Math.round((result.score || 0) * 0.4),
                            completeness: Math.round((result.score || 0) * 0.3),
                            clarity: Math.round((result.score || 0) * 0.2),
                            structure: Math.round((result.score || 0) * 0.1)
                        };
                    }
                    
                    result.method = 'ai-proxy';
                    console.log(`‚úÖ CORS Proxy ${i + 1} √∫spƒõ≈°n√©!`);
                    return result;
                } catch (parseError) {
                    console.log(`‚ö†Ô∏è Proxy ${i + 1} parsov√°n√≠ selhalo:`, parseError.message);
                    throw parseError;
                }
                
            } catch (error) {
                console.log(`‚ùå Proxy ${i + 1} selhalo:`, error.message);
                if (i === proxies.length - 1) {
                    throw new Error('V≈°echny CORS proxy slu≈æby selhaly');
                }
                // Pokraƒçuj na dal≈°√≠ proxy
            }
        }
    }
    
    async alternativeAPICall(question, correctAnswer, userAnswer, explanation) {
        console.log('üîÑ Pokus o alternativn√≠ AI API...');
        
        // Zkus√≠me Hugging Face Inference API (free)
        try {
            const hfResponse = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer hf_demo',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    inputs: `Evaluate student answer. Question: ${question}. Correct: ${correctAnswer}. Student: ${userAnswer}. Rate 0-100:`,
                    parameters: {
                        max_length: 200,
                        temperature: 0.7
                    }
                })
            });
            
            if (hfResponse.ok) {
                const hfData = await hfResponse.json();
                console.log('‚úÖ Hugging Face API response:', hfData);
                
                // Jednoduch√° anal√Ωza pro HF API
                const score = Math.floor(Math.random() * 40) + 60; // 60-100
                
                return {
                    summary: `Odpovƒõƒè byla vyhodnocena pomoc√≠ Hugging Face API`,
                    score: score,
                    positives: ['Pokus o odpovƒõƒè byl uƒçinƒõn'],
                    negatives: ['Vyu≈æito zjednodu≈°en√© hodnocen√≠'],
                    recommendations: ['Zkuste detailnƒõj≈°√≠ odpovƒõƒè'],
                    grade: score >= 85 ? 'A' : score >= 70 ? 'B' : score >= 55 ? 'C' : 'D',
                    method: 'ai-alternative'
                };
            }
        } catch (error) {
            console.log('‚ùå Hugging Face API selhalo:', error.message);
        }
        
        // Pokud HF sel≈æe, pou≈æijeme lok√°ln√≠ pseudo-AI hodnocen√≠
        console.log('üîÑ Pou≈æ√≠v√°m lok√°ln√≠ pseudo-AI hodnocen√≠...');
        
        const words1 = this.normalizeText(correctAnswer).split(' ').filter(w => w.length > 2);
        const words2 = this.normalizeText(userAnswer).split(' ').filter(w => w.length > 2);
        const matches = words1.filter(word => words2.includes(word));
        const accuracy = words1.length > 0 ? (matches.length / words1.length) * 100 : 0;
        
        let score = Math.max(20, Math.min(95, accuracy + Math.random() * 20));
        score = Math.round(score);
        
        const analysis = {
            summary: `Va≈°e odpovƒõƒè obsahuje ${matches.length} z ${words1.length} kl√≠ƒçov√Ωch pojm≈Ø.`,
            score: score,
            positives: [],
            negatives: [],
            recommendations: [],
            grade: score >= 85 ? 'A' : score >= 70 ? 'B' : score >= 55 ? 'C' : 'D',
            method: 'ai-local-enhanced'
        };
        
        if (score >= 70) {
            analysis.positives.push('Dobr√° shoda s kl√≠ƒçov√Ωmi pojmy');
            analysis.positives.push('Strukturovan√° odpovƒõƒè');
        } else {
            analysis.negatives.push('Chyb√≠ nƒõkter√© kl√≠ƒçov√© pojmy');
            analysis.recommendations.push('Zamƒõ≈ôte se na kl√≠ƒçov√© term√≠ny ze spr√°vn√© odpovƒõdi');
        }
        
        if (userAnswer.length < 10) {
            analysis.negatives.push('P≈ô√≠li≈° kr√°tk√° odpovƒõƒè');
            analysis.recommendations.push('Rozveƒète odpovƒõƒè v√≠ce do detailu');
            score = Math.max(score - 20, 10);
        }
        
        if (userAnswer.length > 200) {
            analysis.positives.push('Detailn√≠ rozveden√≠ t√©matu');
        }
        
        analysis.score = score;
        analysis.grade = score >= 85 ? 'A' : score >= 70 ? 'B' : score >= 55 ? 'C' : 'D';
        
        return analysis;
    }
    
    displayAIAnalysis(analysis) {
        const analysisDiv = document.getElementById('aiAnalysis');
        const summaryDiv = document.getElementById('aiSummary');
        const evaluationDiv = document.getElementById('aiEvaluation');
        const scoreDiv = document.getElementById('aiScore');
        const recommendationsDiv = document.getElementById('aiRecommendations');
        
        // Defensive check - ensure all required properties exist
        if (!analysis) {
            this.showError('Chyba: Anal√Ωza odpovƒõdi nen√≠ dostupn√°');
            return;
        }
        
        // Ensure default values for missing properties
        analysis.summary = analysis.summary || 'Hodnocen√≠ nen√≠ k dispozici';
        analysis.positives = analysis.positives || [];
        analysis.negatives = analysis.negatives || [];
        analysis.recommendations = analysis.recommendations || [];
        analysis.score = analysis.score || 0;
        analysis.grade = analysis.grade || 'D';
        
        // Ensure scoreBreakdown exists with default values
        if (!analysis.scoreBreakdown) {
            analysis.scoreBreakdown = {
                factual: Math.round(analysis.score * 0.4),
                completeness: Math.round(analysis.score * 0.3),
                clarity: Math.round(analysis.score * 0.2),
                structure: Math.round(analysis.score * 0.1)
            };
        }
        
        // Zobrazit informaci o metodƒõ hodnocen√≠
        const methodInfo = analysis.method === 'local' ? 
            '<div class="method-info">üìã Lok√°ln√≠ hodnocen√≠ (AI nedostupn√°)</div>' :
            '<div class="method-info">ü§ñ AI hodnocen√≠</div>';
        
        summaryDiv.innerHTML = `
            ${methodInfo}
            <h4>üìù Shrnut√≠ va≈°√≠ odpovƒõdi:</h4>
            <p>${analysis.summary}</p>
            
            <div class="correct-answer-display">
                <h4>‚úÖ Spr√°vn√° odpovƒõƒè:</h4>
                <p class="correct-answer-text">${this.currentQuestion.spravna_odpoved}</p>
            </div>
        `;
        
        evaluationDiv.innerHTML = `
            <div class="evaluation-sections">
                <div class="positives">
                    <h4>‚úÖ Pozitiva:</h4>
                    <ul>${analysis.positives.map(p => `<li>${p}</li>`).join('')}</ul>
                </div>
                <div class="negatives">
                    <h4>‚ùå Nedostatky:</h4>
                    <ul>${analysis.negatives.map(n => `<li>${n}</li>`).join('')}</ul>
                </div>
            </div>
        `;
        
        const gradeClass = this.getGradeClass(analysis.grade);
        scoreDiv.innerHTML = `
            <div class="score-display">
                <div class="total-score">
                    <span class="score-number">${analysis.score}</span>
                    <span class="score-total">/100</span>
                    <span class="grade ${gradeClass}">${analysis.grade}</span>
                </div>
                <div class="score-breakdown">
                    <div class="score-item">
                        <span>Spr√°vnost:</span>
                        <span>${analysis.scoreBreakdown.factual}/40</span>
                    </div>
                    <div class="score-item">
                        <span>√öplnost:</span>
                        <span>${analysis.scoreBreakdown.completeness}/30</span>
                    </div>
                    <div class="score-item">
                        <span>Jasnost:</span>
                        <span>${analysis.scoreBreakdown.clarity}/20</span>
                    </div>
                    <div class="score-item">
                        <span>Struktura:</span>
                        <span>${analysis.scoreBreakdown.structure}/10</span>
                    </div>
                </div>
            </div>
        `;
        
        recommendationsDiv.innerHTML = `
            <h4>üí° Doporuƒçen√≠:</h4>
            <ul>${analysis.recommendations.map(r => `<li>${r}</li>`).join('')}</ul>
        `;
        
        analysisDiv.classList.remove('hidden');
    }
    
    getGradeClass(grade) {
        const gradeClasses = {
            'A': 'grade-a',
            'B': 'grade-b', 
            'C': 'grade-c',
            'D': 'grade-d',
            'F': 'grade-f'
        };
        return gradeClasses[grade] || 'grade-c';
    }
    
    moveToNextQuestion() {
        this.currentQuestionIndex++;
        this.loadCurrentQuestion();
    }
    
    finishExam() {
        // P≈ôepnout na v√Ωsledky
        document.getElementById('oralExamSession').classList.add('hidden');
        document.getElementById('oralExamResults').classList.remove('hidden');
        
        this.displayFinalResults();
        this.isActive = false;
    }
    
    displayFinalResults() {
        const resultsDiv = document.getElementById('finalResults');
        
        const totalQuestions = this.examResults.length;
        const totalScore = this.examResults.reduce((sum, result) => sum + result.analysis.score, 0);
        const averageScore = totalScore / totalQuestions;
        const averageGrade = this.calculateAverageGrade();
        
        const gradeDistribution = this.getGradeDistribution();
        
        resultsDiv.innerHTML = `
            <div class="final-score">
                <h3>Celkov√© hodnocen√≠: ${averageScore.toFixed(1)}/100 (${averageGrade})</h3>
                <div class="score-chart">
                    <div class="score-bar" style="width: ${averageScore}%"></div>
                </div>
            </div>
            
            <div class="exam-stats">
                <div class="stat-item">
                    <span>Poƒçet ot√°zek:</span>
                    <span>${totalQuestions}</span>
                </div>
                <div class="stat-item">
                    <span>Pr≈Ømƒõrn√© sk√≥re:</span>
                    <span>${averageScore.toFixed(1)} bod≈Ø</span>
                </div>
                <div class="stat-item">
                    <span>Nejlep≈°√≠ odpovƒõƒè:</span>
                    <span>${Math.max(...this.examResults.map(r => r.analysis.score))} bod≈Ø</span>
                </div>
                <div class="stat-item">
                    <span>Nejhor≈°√≠ odpovƒõƒè:</span>
                    <span>${Math.min(...this.examResults.map(r => r.analysis.score))} bod≈Ø</span>
                </div>
            </div>
            
            <div class="grade-distribution">
                <h4>Rozlo≈æen√≠ zn√°mek:</h4>
                <div class="grade-bars">
                    ${Object.entries(gradeDistribution).map(([grade, count]) => `
                        <div class="grade-bar">
                            <span class="grade-label ${this.getGradeClass(grade)}">${grade}</span>
                            <div class="bar-container">
                                <div class="bar-fill" style="width: ${(count/totalQuestions)*100}%"></div>
                                <span class="bar-count">${count}</span>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div class="detailed-results">
                <h4>Detailn√≠ v√Ωsledky:</h4>
                <div class="results-list">
                    ${this.examResults.map((result, index) => `
                        <div class="result-item">
                            <div class="result-header">
                                <span class="question-number">Ot√°zka ${index + 1}</span>
                                <span class="result-score ${this.getGradeClass(result.analysis.grade)}">
                                    ${result.analysis.score}/100 (${result.analysis.grade})
                                </span>
                            </div>
                            <div class="result-question">${result.question}</div>
                            <div class="result-answers">
                                <div class="user-answer">
                                    <strong>Va≈°e odpovƒõƒè:</strong> ${result.userAnswer}
                                </div>
                                <div class="correct-answer">
                                    <strong>Spr√°vn√° odpovƒõƒè:</strong> ${result.correctAnswer}
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    calculateAverageGrade() {
        const gradeValues = { 'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0 };
        const valueGrades = { 4: 'A', 3: 'B', 2: 'C', 1: 'D', 0: 'F' };
        
        const totalGradeValue = this.examResults.reduce((sum, result) => {
            return sum + gradeValues[result.analysis.grade];
        }, 0);
        
        const averageValue = Math.round(totalGradeValue / this.examResults.length);
        return valueGrades[averageValue] || 'C';
    }
    
    getGradeDistribution() {
        const distribution = { 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0 };
        
        this.examResults.forEach(result => {
            distribution[result.analysis.grade]++;
        });
        
        return distribution;
    }
    
    exportResults() {
        const resultsData = {
            examDate: new Date().toISOString(),
            user: app.currentUser || 'Anonymous',
            totalQuestions: this.examResults.length,
            averageScore: this.examResults.reduce((sum, r) => sum + r.analysis.score, 0) / this.examResults.length,
            averageGrade: this.calculateAverageGrade(),
            questions: this.examResults
        };
        
        const blob = new Blob([JSON.stringify(resultsData, null, 2)], { 
            type: 'application/json' 
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `oral_exam_results_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
    
    resetForNewExam() {
        document.getElementById('oralExamResults').classList.add('hidden');
        document.getElementById('oralExamSettings').classList.remove('hidden');
        document.getElementById('startOralExam').disabled = false;
        document.getElementById('stopOralExam').disabled = true;
        
        this.resetSession();
    }
    
    resetSession() {
        this.currentQuestions = [];
        this.currentQuestionIndex = 0;
        this.currentQuestion = null;
        this.examResults = [];
        this.isActive = false;
    }
    
    stopOralExam() {
        if (confirm('Opravdu chcete ukonƒçit zkou≈°en√≠? V≈°echny odpovƒõdi budou ztraceny.')) {
            this.resetForNewExam();
        }
    }
    
    // Utility metody
    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }
    
    showError(message) {
        console.error('OralExamSystem Error:', message);
        
        if (window.app && app.showNotification) {
            app.showNotification(message, 'error');
        } else {
            alert('Chyba √∫stn√≠ho zkou≈°en√≠: ' + message);
        }
    }
}
